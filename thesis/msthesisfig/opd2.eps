%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Visio-thefigures.vsd)
%%Version: 1 5
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 21:06:43 07/08/04
%%For: (crupley)
%%DocumentData: Clean7Bit
%%BoundingBox: 19 555 458 769
%%HiResBoundingBox: 19.0 555.0 457.5 768.5
%%Pages: 0
%%DocumentProcessColors: Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%+ procset (Adobe Acrobat - general image support) 1.2 0
%%+ procset (Adobe Acrobat - monochrome image support) 1.2 0
%%+ procset (Adobe Acrobat - color image support) 1.2 0
%%+ procset (Adobe Acrobat - indexed color image support) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L1 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr SEPS ttf HB  0
%%BeginResource: file Pscript_T42Hdr PSVER
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset l2compat 6.0 1
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
cvi
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset sep_ops 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/undefineRes {
null exch
defineRes
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource TimesNewRomanPSMT
[/N14/TimesNewRomanPSMT 1 TZ
%%IncludeResource ArialMT
[/N19/ArialMT 1 TZ

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 1247 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:1d70837f-83cb-4103-9ac6-599095b8bbaf' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Acrobat Distiller 6.0 (Windows)'></rdf:Description>
<rdf:Description rdf:about='uuid:1d70837f-83cb-4103-9ac6-599095b8bbaf' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:CreatorTool='PScript5.dll Version 5.2.2' xap:ModifyDate='2004-07-08T21:06:37-05:00' xap:CreateDate='2004-07-08T21:06:19-05:00' xap:MetadataDate='2004-07-08T21:06:37-05:00'></rdf:Description>
<rdf:Description rdf:about='uuid:1d70837f-83cb-4103-9ac6-599095b8bbaf' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:e64c59fa-a08d-47ba-be1b-b61d5c6fb485'/>
<rdf:Description rdf:about='uuid:1d70837f-83cb-4103-9ac6-599095b8bbaf' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>Visio-thefigures.vsd</rdf:li></rdf:Alt></dc:title><dc:creator><rdf:Seq><rdf:li>crupley</rdf:li></rdf:Seq></dc:creator></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
19 555 439 214 rectclip
/N11 [/DeviceRGB] /ColorSpace defineRes pop

19.0 555.0 438.5 213.5 re
W
n
1 J
1 j
0.214 w
n
111.599998 700.079956 m
112.079994 701.519958 l
112.559998 702.959961 l
113.040001 704.159973 l
113.519997 705.600037 l
114.239998 706.799988 l
114.720001 708.23999 l
115.200005 709.440002 l
115.919998 710.639954 l
116.400002 711.839966 l
116.879997 712.799988 l
117.599998 714.0 l
118.079994 714.959961 l
118.559998 715.919983 l
119.040001 716.880005 l
119.519997 717.600037 l
120.0 718.320007 l
120.719994 719.039978 l
121.200005 719.76001 l
121.68 720.23999 l
122.400002 720.719971 l
122.879997 720.959961 l
123.839996 721.440002 l
126.0 721.440002 l
126.479996 721.200012 l
127.200005 720.719971 l
127.68 720.47998 l
128.160004 720.0 l
128.87999 719.519958 l
129.360001 718.799988 l
130.319992 717.359985 l
130.800003 716.400024 l
131.279999 715.440002 l
132.0 714.47998 l
132.479996 713.519958 l
132.959991 712.320007 l
133.679993 711.119995 l
134.160004 709.919983 l
134.639999 708.719971 l
135.360001 707.519958 l
135.839996 706.320007 l
136.319992 704.880005 l
136.800003 703.679993 l
137.279999 702.23999 l
138.0 700.799988 l
138.479996 699.600037 l
138.959991 698.159973 l
139.679993 696.719971 l
140.160004 695.519958 l
140.639999 694.079956 l
141.119995 692.880005 l
141.600006 691.679993 l
142.319992 690.47998 l
142.800003 689.279968 l
143.279999 688.079956 l
143.759995 687.119995 l
144.479996 685.919983 l
145.440002 684.0 l
146.160004 683.039978 l
146.639999 682.320007 l
147.119995 681.600037 l
147.600006 681.119995 l
148.080002 680.400024 l
148.559998 679.919983 l
149.279999 679.679993 l
149.759995 679.200012 l
150.23999 678.959961 l
152.400009 678.959961 l
153.119995 679.200012 l
153.600006 679.440002 l
154.080002 679.679993 l
154.559998 680.159973 l
155.039993 680.880005 l
155.759995 681.359985 l
156.23999 682.079956 l
156.720001 682.799988 l
157.440002 683.519958 l
157.919998 684.47998 l
158.87999 686.400024 l
159.360001 687.600037 l
160.080002 688.559998 l
161.519989 692.159973 l
162.23999 693.600037 l
162.720001 694.799988 l
163.199997 696.23999 l
163.919998 697.440002 l
164.400009 698.880005 l
164.87999 700.079956 l
0.003922 sg
S
0.213 w
n
58.559998 651.839966 m
59.279999 654.47998 l
59.759998 657.119995 l
60.719997 662.400024 l
61.439999 664.559998 l
61.919998 666.719971 l
62.400002 668.400024 l
63.119999 670.079956 l
63.600002 671.279968 l
64.080002 672.23999 l
64.559998 672.959961 l
65.040001 673.200012 l
65.519997 673.200012 l
66.239998 672.719971 l
66.720001 672.0 l
67.200005 671.039978 l
67.919998 669.600037 l
68.400002 668.159973 l
68.879997 666.23999 l
69.360001 663.839966 l
70.080002 661.679993 l
70.559998 659.279968 l
71.519997 654.0 l
72.0 651.119995 l
72.720001 648.47998 l
73.200005 645.839966 l
73.68 643.200012 l
74.400002 641.039978 l
74.879997 638.640015 l
75.360001 636.719971 l
75.839996 634.799988 l
76.32 633.359985 l
77.040001 632.159973 l
77.519997 631.200012 l
78.0 630.719971 l
78.479996 630.47998 l
79.200005 630.719971 l
79.68 630.959961 l
80.159996 631.919983 l
80.879997 633.119995 l
81.360001 634.320007 l
81.839996 636.23999 l
82.32 638.159973 l
82.800003 640.320007 l
83.279999 642.719971 l
84.0 645.119995 l
84.479996 647.76001 l
85.200005 650.640015 l
86.639999 658.559998 l
87.119995 660.959961 l
87.839996 663.359985 l
88.32 665.519958 l
88.800003 667.679993 l
89.279999 669.359985 l
90.0 670.799988 l
90.479996 671.76001 l
90.959999 672.719971 l
91.68 672.959961 l
92.159996 673.200012 l
92.639999 672.959961 l
93.119995 672.47998 l
93.599998 671.519958 l
94.079994 670.559998 l
94.800003 668.880005 l
95.279999 666.959961 l
95.759995 665.039978 l
96.479996 662.880005 l
96.959999 660.47998 l
97.439995 657.839966 l
97.919998 655.200012 l
98.639999 652.559998 l
99.119995 649.919983 l
100.079994 644.640015 l
100.559998 642.0 l
101.279999 639.839966 l
101.759995 637.440002 l
102.239998 635.76001 l
102.959999 634.079956 l
103.439995 632.640015 l
103.919998 631.679993 l
104.400002 630.959961 l
104.879997 630.47998 l
105.599998 630.47998 l
106.079994 630.719971 l
106.559998 631.440002 l
107.040001 632.400024 l
107.759995 633.600037 l
108.720001 636.959961 l
109.439995 639.119995 l
109.919998 641.519958 l
110.400002 643.919983 l
111.360001 649.200012 l
112.079994 651.839966 l
112.559998 654.47998 l
113.279999 657.119995 l
114.239998 662.400024 l
114.959999 664.559998 l
115.439995 666.719971 l
115.919998 668.400024 l
116.400002 670.079956 l
116.879997 671.279968 l
117.360001 672.23999 l
118.079994 672.959961 l
118.559998 673.200012 l
119.040001 673.200012 l
119.759995 672.719971 l
120.239998 672.0 l
120.719994 671.039978 l
121.200005 669.600037 l
121.919998 668.159973 l
122.400002 666.23999 l
122.879997 664.079956 l
123.839996 659.279968 l
124.559998 656.640015 l
125.040001 654.0 l
125.519997 651.119995 l
126.239998 648.47998 l
126.719994 645.839966 l
127.200005 643.440002 l
128.160004 638.640015 l
128.639999 636.719971 l
129.360001 634.799988 l
129.839996 633.359985 l
130.319992 632.159973 l
131.039993 631.440002 l
131.520004 630.719971 l
132.0 630.47998 l
132.720001 630.719971 l
133.199997 630.959961 l
133.679993 631.919983 l
134.160004 633.119995 l
134.639999 634.559998 l
135.119995 636.23999 l
135.839996 638.159973 l
136.319992 640.320007 l
136.800003 642.719971 l
137.520004 645.119995 l
138.0 647.76001 l
138.479996 650.640015 l
138.959991 653.279968 l
139.679993 655.919983 l
140.160004 658.559998 l
140.639999 661.200012 l
141.119995 663.359985 l
141.839996 665.519958 l
142.319992 667.679993 l
142.800003 669.359985 l
143.520004 670.799988 l
144.0 671.76001 l
144.479996 672.719971 l
144.959991 673.200012 l
145.919998 673.200012 l
146.639999 672.47998 l
147.119995 671.519958 l
147.600006 670.559998 l
148.319992 668.880005 l
148.800003 667.200012 l
149.279999 665.039978 l
149.759995 662.880005 l
150.479996 660.47998 l
150.959991 657.839966 l
151.440002 655.440002 l
151.919998 652.559998 l
152.400009 649.919983 l
153.119995 647.279968 l
153.600006 644.640015 l
154.080002 642.0 l
154.800003 639.839966 l
155.279999 637.679993 l
155.759995 635.76001 l
156.23999 634.079956 l
156.720001 632.640015 l
157.440002 631.679993 l
157.919998 630.959961 l
158.400009 630.47998 l
158.87999 630.47998 l
159.600006 630.719971 l
160.080002 631.440002 l
160.559998 632.400024 l
161.279999 633.600037 l
162.23999 636.959961 l
162.720001 639.119995 l
163.679993 643.919983 l
164.400009 646.559998 l
164.87999 649.200012 l
165.600006 651.839966 l
S
0.214 w
n
58.079998 700.079956 m
58.559998 701.519958 l
59.279999 702.959961 l
59.759998 704.159973 l
60.239998 705.600037 l
60.719997 706.799988 l
61.439999 708.23999 l
61.919998 709.440002 l
62.400002 710.639954 l
62.879997 711.839966 l
63.359997 712.799988 l
64.080002 714.0 l
64.559998 714.959961 l
65.040001 715.919983 l
65.760002 716.880005 l
66.239998 717.600037 l
66.720001 718.320007 l
67.200005 719.039978 l
67.68 719.76001 l
68.400002 720.23999 l
68.879997 720.719971 l
69.360001 720.959961 l
69.839996 721.200012 l
70.559998 721.440002 l
72.720001 721.440002 l
73.200005 721.200012 l
73.68 720.719971 l
74.159996 720.47998 l
74.639999 720.0 l
75.360001 719.519958 l
75.839996 718.799988 l
76.32 718.079956 l
77.040001 717.359985 l
77.519997 716.400024 l
78.0 715.440002 l
78.479996 714.47998 l
79.200005 713.519958 l
80.159996 711.119995 l
80.639999 709.919983 l
81.119995 708.719971 l
81.839996 707.519958 l
82.32 706.320007 l
82.800003 704.880005 l
83.519997 703.679993 l
84.0 702.23999 l
84.479996 700.799988 l
84.959999 699.600037 l
85.439995 698.159973 l
86.159996 696.719971 l
86.639999 695.519958 l
87.119995 694.079956 l
87.839996 692.880005 l
88.32 691.679993 l
88.800003 690.47998 l
89.519997 689.279968 l
90.0 688.079956 l
90.479996 687.119995 l
90.959999 685.919983 l
91.439995 684.959961 l
91.919998 684.0 l
92.639999 683.039978 l
93.119995 682.320007 l
93.599998 681.600037 l
94.32 681.119995 l
94.800003 680.400024 l
95.279999 679.919983 l
95.759995 679.679993 l
96.479996 679.200012 l
96.959999 678.959961 l
99.119995 678.959961 l
100.079994 679.440002 l
100.800003 679.679993 l
101.279999 680.159973 l
101.759995 680.880005 l
102.239998 681.359985 l
102.720001 682.079956 l
103.439995 682.799988 l
103.919998 683.519958 l
104.400002 684.47998 l
104.879997 685.440002 l
105.599998 686.400024 l
106.079994 687.600037 l
106.559998 688.559998 l
107.279999 689.76001 l
108.239998 692.159973 l
108.720001 693.600037 l
109.200005 694.799988 l
109.68 696.23999 l
110.400002 697.440002 l
110.879997 698.880005 l
111.599998 700.079956 l
S
0.0 sg
285.119995 745.200012 m
/N14 12.0 Tf
(BBO2)
[7.920089 7.920089 8.877602 5.916 ] pdfxs
0.72 w
n
57.600002 723.839966 m
57.600002 624.959961 l
0.003922 sg
S
0.213 w
n
165.600006 651.839966 m
166.080002 654.47998 l
166.559998 657.119995 l
167.519989 662.400024 l
168.23999 664.559998 l
168.720001 666.719971 l
169.199997 668.400024 l
169.919998 670.079956 l
170.400009 671.279968 l
170.87999 672.23999 l
171.360001 672.959961 l
172.080002 673.200012 l
172.559998 673.200012 l
173.039993 672.719971 l
173.519989 672.0 l
174.0 671.039978 l
174.720001 669.600037 l
175.199997 668.159973 l
175.679993 666.23999 l
176.400009 663.839966 l
176.87999 661.679993 l
177.360001 659.279968 l
178.319992 654.0 l
179.039993 651.119995 l
179.519989 648.47998 l
180.0 645.839966 l
180.479996 643.200012 l
181.199997 641.039978 l
181.679993 638.640015 l
182.159988 636.719971 l
182.87999 634.799988 l
183.360001 633.359985 l
183.839996 632.159973 l
184.319992 631.200012 l
184.800003 630.719971 l
185.279999 630.47998 l
186.0 630.719971 l
186.479996 630.959961 l
186.959991 631.919983 l
187.679993 633.119995 l
188.159988 634.559998 l
188.639999 636.23999 l
189.119995 638.159973 l
189.839996 640.320007 l
190.319992 642.719971 l
190.800003 645.119995 l
191.279999 647.76001 l
192.0 650.640015 l
192.959991 655.919983 l
193.679993 658.559998 l
194.159988 660.959961 l
194.639999 663.359985 l
195.119995 665.519958 l
195.600006 667.679993 l
196.080002 669.359985 l
196.800003 670.799988 l
197.759995 672.719971 l
198.479996 673.200012 l
199.440002 673.200012 l
200.159988 672.47998 l
200.639999 671.519958 l
201.119995 670.559998 l
201.600006 668.880005 l
202.080002 666.959961 l
202.559998 665.039978 l
203.279999 662.880005 l
203.759995 660.47998 l
204.23999 657.839966 l
204.959991 655.440002 l
205.440002 652.559998 l
205.919998 649.919983 l
206.87999 644.640015 l
207.600006 642.0 l
208.080002 639.839966 l
208.559998 637.679993 l
209.039993 635.76001 l
209.759995 634.079956 l
210.23999 632.640015 l
210.720001 631.679993 l
211.440002 630.959961 l
211.919998 630.47998 l
212.400009 630.47998 l
212.87999 630.719971 l
213.360001 631.440002 l
213.839996 632.400024 l
214.559998 633.600037 l
215.039993 635.279968 l
215.519989 636.959961 l
216.23999 639.119995 l
216.720001 641.519958 l
217.199997 643.919983 l
217.919998 646.559998 l
218.400009 649.200012 l
218.87999 651.839966 l
219.600006 654.47998 l
220.080002 657.119995 l
220.559998 659.76001 l
221.039993 662.159973 l
221.759995 664.559998 l
222.23999 666.719971 l
222.720001 668.400024 l
223.440002 670.079956 l
223.919998 671.279968 l
224.400009 672.23999 l
224.87999 672.959961 l
225.360001 673.200012 l
225.839996 673.200012 l
226.559998 672.719971 l
227.039993 672.0 l
227.519989 671.039978 l
228.23999 669.600037 l
228.720001 667.919983 l
229.199997 666.23999 l
229.679993 663.839966 l
230.400009 661.679993 l
230.87999 659.039978 l
231.360001 656.640015 l
231.839996 654.0 l
232.319992 651.119995 l
233.039993 648.47998 l
233.519989 645.839966 l
234.0 643.200012 l
234.720001 640.799988 l
235.199997 638.640015 l
235.679993 636.719971 l
236.159988 634.799988 l
236.639999 633.359985 l
237.360001 632.159973 l
237.839996 631.200012 l
238.319992 630.719971 l
238.800003 630.47998 l
239.519989 630.719971 l
240.0 630.959961 l
240.479996 631.919983 l
241.199997 633.119995 l
241.679993 634.320007 l
242.159988 636.23999 l
242.639999 638.159973 l
243.119995 640.320007 l
243.600006 642.719971 l
244.319992 645.119995 l
244.800003 647.76001 l
245.519989 650.400024 l
246.0 653.039978 l
246.479996 655.919983 l
246.959991 658.559998 l
247.439987 660.959961 l
248.159988 663.359985 l
248.639999 665.519958 l
249.119995 667.440002 l
249.600006 669.359985 l
250.319992 670.559998 l
250.800003 671.76001 l
251.279999 672.719971 l
252.0 672.959961 l
252.479996 673.200012 l
252.959991 672.959961 l
253.439987 672.47998 l
253.919998 671.519958 l
254.400009 670.320007 l
255.119995 668.880005 l
255.600006 666.959961 l
256.079987 665.039978 l
256.800018 662.880005 l
257.279999 660.47998 l
257.759979 657.839966 l
258.47998 655.200012 l
258.959991 652.559998 l
259.440002 649.679993 l
259.919983 647.039978 l
260.399994 644.400024 l
260.880005 642.0 l
261.600006 639.839966 l
262.079987 637.440002 l
262.559998 635.519958 l
263.279999 634.079956 l
263.759979 632.640015 l
264.23999 631.679993 l
264.720001 630.959961 l
265.200012 630.47998 l
265.919983 630.47998 l
266.399994 630.719971 l
266.880005 631.440002 l
267.359985 632.400024 l
268.079987 633.600037 l
269.040009 636.959961 l
269.759979 639.119995 l
270.23999 641.279968 l
271.200012 646.559998 l
271.679993 649.200012 l
272.399994 651.839966 l
S
0.214 w
n
164.87999 700.079956 m
165.360001 701.519958 l
166.080002 702.959961 l
166.559998 704.159973 l
167.039993 705.600037 l
167.759995 706.799988 l
168.23999 708.23999 l
168.720001 709.440002 l
169.440002 710.639954 l
169.919998 711.839966 l
170.400009 712.799988 l
170.87999 714.0 l
171.360001 714.959961 l
171.839996 715.919983 l
172.559998 716.880005 l
173.039993 717.600037 l
173.519989 718.320007 l
174.23999 719.039978 l
174.720001 719.76001 l
175.679993 720.719971 l
176.400009 720.959961 l
176.87999 721.200012 l
177.360001 721.440002 l
179.519989 721.440002 l
180.0 721.200012 l
180.720001 720.719971 l
181.199997 720.47998 l
182.159988 719.519958 l
182.639999 718.799988 l
183.119995 718.079956 l
183.839996 717.359985 l
184.319992 716.400024 l
184.800003 715.440002 l
185.519989 714.47998 l
186.0 713.519958 l
186.479996 712.320007 l
187.199997 711.119995 l
187.679993 709.919983 l
188.159988 708.719971 l
188.639999 707.519958 l
189.119995 706.320007 l
189.600006 704.880005 l
190.319992 703.679993 l
190.800003 702.23999 l
191.519989 700.799988 l
192.0 699.600037 l
192.479996 698.159973 l
192.959991 696.719971 l
193.440002 695.519958 l
194.159988 694.079956 l
194.639999 692.880005 l
195.119995 691.679993 l
195.600006 690.47998 l
196.319992 689.279968 l
196.800003 688.079956 l
197.279999 687.119995 l
198.0 685.919983 l
198.479996 684.959961 l
199.440002 683.039978 l
199.919998 682.320007 l
200.400009 681.600037 l
201.119995 681.119995 l
201.600006 680.400024 l
202.080002 679.919983 l
202.800003 679.679993 l
203.279999 679.200012 l
203.759995 678.959961 l
205.919998 678.959961 l
206.87999 679.440002 l
207.600006 679.679993 l
208.080002 680.159973 l
208.559998 680.880005 l
209.279999 681.359985 l
209.759995 682.079956 l
210.23999 682.799988 l
210.720001 683.519958 l
211.199997 684.47998 l
211.919998 685.440002 l
212.400009 686.400024 l
212.87999 687.600037 l
213.360001 688.559998 l
214.080002 689.76001 l
215.039993 692.159973 l
215.759995 693.600037 l
216.23999 694.799988 l
216.720001 696.23999 l
217.199997 697.440002 l
217.679993 698.880005 l
218.400009 700.079956 l
218.87999 701.519958 l
219.600006 702.959961 l
220.080002 704.159973 l
220.559998 705.600037 l
221.039993 706.799988 l
221.519989 708.23999 l
222.23999 709.440002 l
222.720001 710.639954 l
223.199997 711.839966 l
223.679993 712.799988 l
224.400009 714.0 l
224.87999 714.959961 l
225.360001 715.919983 l
226.080002 716.880005 l
226.559998 717.600037 l
227.039993 718.320007 l
227.519989 719.039978 l
228.0 719.76001 l
228.479996 720.23999 l
229.199997 720.719971 l
229.679993 720.959961 l
230.159988 721.200012 l
230.87999 721.440002 l
233.039993 721.440002 l
233.519989 721.200012 l
234.0 720.719971 l
234.479996 720.47998 l
234.959991 720.0 l
235.679993 719.519958 l
236.159988 718.799988 l
236.639999 718.079956 l
237.360001 717.359985 l
237.839996 716.400024 l
238.319992 715.440002 l
238.800003 714.47998 l
239.279999 713.519958 l
240.0 712.320007 l
240.479996 711.119995 l
240.959991 709.919983 l
241.439987 708.719971 l
242.159988 707.519958 l
242.639999 706.320007 l
243.119995 704.880005 l
243.839996 703.679993 l
244.319992 702.23999 l
244.800003 700.799988 l
245.279999 699.600037 l
245.759995 698.159973 l
246.479996 696.719971 l
246.959991 695.519958 l
247.439987 694.079956 l
248.159988 692.880005 l
248.639999 691.679993 l
249.119995 690.47998 l
249.600006 689.279968 l
250.080002 688.079956 l
250.800003 687.119995 l
251.279999 685.919983 l
252.23999 684.0 l
252.959991 683.039978 l
253.439987 682.320007 l
253.919998 681.600037 l
254.639999 681.119995 l
255.119995 680.400024 l
255.600006 679.919983 l
256.079987 679.679993 l
256.559998 679.200012 l
257.040009 678.959961 l
259.440002 678.959961 l
259.919983 679.200012 l
260.399994 679.440002 l
261.119995 679.679993 l
261.600006 680.159973 l
262.079987 680.880005 l
262.559998 681.359985 l
263.040009 682.079956 l
263.519989 682.799988 l
264.23999 683.519958 l
264.720001 684.47998 l
265.200012 685.440002 l
265.919983 686.400024 l
266.399994 687.600037 l
266.880005 688.559998 l
267.359985 689.76001 l
267.839996 690.959961 l
268.559998 692.159973 l
269.040009 693.600037 l
269.519989 694.799988 l
270.0 696.23999 l
270.720001 697.440002 l
271.200012 698.880005 l
271.919983 700.079956 l
S
0.72 w
n
57.600002 696.959961 m
408.47998 696.959961 l
57.600002 651.839966 m
408.47998 651.839966 l
S
0.213 w
n
336.47998 651.839966 m
336.959991 654.47998 l
337.679993 657.119995 l
338.639984 662.400024 l
339.359985 664.559998 l
339.839996 666.719971 l
340.800018 670.079956 l
341.279999 671.279968 l
341.759979 672.23999 l
342.47998 672.959961 l
342.959991 673.200012 l
343.440002 673.200012 l
344.160004 672.719971 l
344.639984 672.0 l
345.119995 671.039978 l
345.600006 669.600037 l
346.320007 668.159973 l
346.800018 666.23999 l
347.279999 663.839966 l
347.759979 661.679993 l
348.23999 659.279968 l
348.959991 656.640015 l
349.440002 654.0 l
349.919983 651.119995 l
350.639984 648.47998 l
351.119995 645.839966 l
351.600006 643.200012 l
352.079987 641.039978 l
352.559998 638.640015 l
353.279999 636.719971 l
353.759979 634.799988 l
354.23999 633.359985 l
354.720001 632.159973 l
355.440002 631.200012 l
355.919983 630.719971 l
356.399994 630.47998 l
357.119995 630.719971 l
357.600006 630.959961 l
358.079987 631.919983 l
358.559998 633.119995 l
359.039978 634.559998 l
359.519989 636.23999 l
360.23999 638.159973 l
360.720001 640.320007 l
361.200012 642.719971 l
361.919983 645.119995 l
362.399994 647.76001 l
362.880005 650.640015 l
363.359985 653.279968 l
364.079987 655.919983 l
364.559998 658.559998 l
365.039978 660.959961 l
365.519989 663.359985 l
366.23999 665.519958 l
366.720001 667.679993 l
367.200012 669.359985 l
367.919983 670.799988 l
368.399994 671.76001 l
368.880005 672.719971 l
369.359985 673.200012 l
370.319977 673.200012 l
371.039978 672.47998 l
372.0 670.559998 l
372.720001 668.880005 l
373.200012 666.959961 l
373.679993 665.039978 l
374.160004 662.880005 l
374.880005 660.47998 l
375.359985 657.839966 l
375.839996 655.440002 l
376.319977 652.559998 l
376.800018 649.919983 l
377.519989 647.279968 l
378.47998 642.0 l
379.200012 639.839966 l
379.679993 637.679993 l
380.160004 635.76001 l
380.639984 634.079956 l
381.119995 632.640015 l
381.839996 631.679993 l
382.319977 630.959961 l
382.800018 630.47998 l
383.279999 630.47998 l
384.0 630.719971 l
384.47998 631.440002 l
384.959991 632.400024 l
385.679993 633.600037 l
386.160004 635.279968 l
386.639984 636.959961 l
387.119995 639.119995 l
387.600006 641.519958 l
388.079987 643.919983 l
388.800018 646.559998 l
389.279999 649.200012 l
390.0 651.839966 l
354.47998 696.719971 m
354.959991 699.600037 l
355.679993 702.23999 l
356.160004 704.880005 l
356.639984 707.279968 l
357.359985 709.679993 l
358.319977 713.519958 l
358.800018 715.200012 l
359.279999 716.400024 l
359.759979 717.359985 l
360.47998 717.839966 l
360.959991 718.320007 l
361.440002 718.320007 l
362.160004 717.839966 l
362.639984 717.119995 l
363.119995 716.159973 l
363.600006 714.719971 l
364.319977 713.039978 l
364.800018 711.119995 l
365.279999 708.959961 l
365.759979 706.799988 l
366.23999 704.159973 l
366.959991 701.519958 l
367.919983 696.23999 l
368.639984 693.359985 l
369.119995 690.719971 l
369.600006 688.320007 l
370.079987 685.919983 l
370.559998 683.76001 l
371.279999 681.600037 l
371.759979 679.919983 l
372.23999 678.23999 l
372.720001 677.279968 l
373.440002 676.320007 l
373.919983 675.600037 l
375.119995 675.600037 l
375.600006 676.079956 l
376.079987 677.039978 l
376.559998 678.0 l
377.039978 679.440002 l
377.519989 681.119995 l
378.23999 683.279968 l
378.720001 685.200012 l
379.200012 687.600037 l
379.919983 690.23999 l
380.399994 692.880005 l
381.359985 698.159973 l
382.079987 701.039978 l
382.559998 703.679993 l
383.039978 706.079956 l
383.519989 708.47998 l
384.23999 710.639954 l
384.720001 712.559998 l
385.200012 714.23999 l
385.919983 715.679993 l
386.399994 716.880005 l
386.880005 717.600037 l
387.359985 718.079956 l
387.839996 718.320007 l
388.319977 718.079956 l
389.039978 717.359985 l
389.519989 716.639954 l
390.0 715.440002 l
390.720001 714.0 l
391.679993 710.159973 l
392.160004 707.76001 l
392.880005 705.359985 l
393.359985 702.959961 l
393.839996 700.320007 l
394.319977 697.679993 l
394.800018 694.799988 l
395.519989 692.159973 l
396.0 689.519958 l
396.47998 687.119995 l
397.200012 684.719971 l
397.679993 682.559998 l
398.160004 680.640015 l
398.639984 678.959961 l
399.119995 677.76001 l
399.839996 676.799988 l
400.319977 675.839966 l
400.800018 675.600037 l
401.279999 675.600037 l
402.0 675.839966 l
402.47998 676.320007 l
402.959991 677.519958 l
403.679993 678.719971 l
404.160004 680.400024 l
404.639984 682.079956 l
405.119995 684.23999 l
405.600006 686.400024 l
406.079987 689.039978 l
406.800018 691.679993 l
407.279999 694.079956 l
408.0 696.719971 l
390.0 651.839966 m
390.47998 654.47998 l
390.959991 657.119995 l
391.679993 659.76001 l
392.160004 662.400024 l
392.639984 664.559998 l
393.119995 666.719971 l
393.600006 668.400024 l
394.319977 670.079956 l
394.800018 671.279968 l
395.279999 672.23999 l
396.0 672.959961 l
396.47998 673.200012 l
396.959991 673.200012 l
397.440002 672.719971 l
397.919983 672.0 l
398.639984 671.039978 l
399.119995 669.600037 l
399.600006 668.159973 l
400.079987 666.23999 l
400.800018 663.839966 l
401.279999 661.679993 l
401.759979 659.279968 l
402.47998 656.640015 l
402.959991 654.0 l
403.440002 651.119995 l
403.919983 648.47998 l
404.399994 645.839966 l
404.880005 643.200012 l
405.600006 641.039978 l
406.079987 638.640015 l
406.559998 636.719971 l
407.279999 634.799988 l
407.759979 633.359985 l
408.23999 632.159973 l
408.720001 631.200012 l
409.440002 630.719971 l
409.919983 630.47998 l
410.399994 630.719971 l
410.880005 630.959961 l
411.359985 631.919983 l
412.079987 633.119995 l
412.559998 634.559998 l
413.039978 636.23999 l
413.759979 638.159973 l
414.23999 640.320007 l
414.720001 642.719971 l
415.200012 645.119995 l
415.679993 647.76001 l
416.399994 650.640015 l
417.359985 655.919983 l
418.079987 658.559998 l
418.559998 660.959961 l
419.039978 663.359985 l
419.519989 665.519958 l
420.23999 667.679993 l
420.720001 669.359985 l
421.200012 670.799988 l
421.679993 671.76001 l
422.160004 672.719971 l
422.880005 673.200012 l
423.839996 673.200012 l
424.559998 672.47998 l
425.039978 671.519958 l
425.519989 670.559998 l
426.0 668.880005 l
426.47998 666.959961 l
427.200012 665.039978 l
427.679993 662.880005 l
428.160004 660.47998 l
428.639984 657.839966 l
429.359985 655.440002 l
429.839996 652.559998 l
430.319977 649.919983 l
431.039978 647.279968 l
431.519989 644.640015 l
432.0 642.0 l
432.47998 639.839966 l
432.959991 637.679993 l
433.440002 635.76001 l
434.160004 634.079956 l
434.639984 632.640015 l
435.119995 631.679993 l
435.839996 630.959961 l
436.319977 630.47998 l
436.800018 630.47998 l
437.279999 630.719971 l
438.0 631.440002 l
438.47998 632.400024 l
438.959991 633.600037 l
439.919983 636.959961 l
440.639984 639.119995 l
441.119995 641.519958 l
441.600006 643.919983 l
442.319977 646.559998 l
442.800018 649.200012 l
443.279999 651.839966 l
301.200012 696.719971 m
301.679993 699.600037 l
302.639984 704.880005 l
303.119995 707.279968 l
303.839996 709.679993 l
304.320007 711.600037 l
304.800018 713.519958 l
305.519989 715.200012 l
306.0 716.400024 l
306.47998 717.359985 l
306.959991 717.839966 l
307.679993 718.320007 l
308.160004 718.320007 l
308.639984 717.839966 l
309.119995 717.119995 l
309.600006 716.159973 l
310.320007 714.719971 l
310.800018 713.039978 l
311.279999 711.119995 l
312.0 708.959961 l
312.47998 706.799988 l
312.959991 704.159973 l
313.919983 698.880005 l
314.639984 696.23999 l
315.119995 693.359985 l
315.600006 690.719971 l
316.079987 688.320007 l
316.800018 685.919983 l
317.759979 681.600037 l
318.47998 679.919983 l
318.959991 678.23999 l
319.440002 677.279968 l
319.919983 676.320007 l
320.399994 675.600037 l
321.600006 675.600037 l
322.079987 676.079956 l
322.559998 677.039978 l
323.279999 678.0 l
323.759979 679.440002 l
324.23999 681.119995 l
324.720001 683.279968 l
325.440002 685.200012 l
325.919983 687.600037 l
326.399994 690.23999 l
326.880005 692.880005 l
327.600006 695.519958 l
328.079987 698.159973 l
328.559998 701.039978 l
329.279999 703.679993 l
329.759979 706.079956 l
330.23999 708.47998 l
330.720001 710.639954 l
331.200012 712.559998 l
331.679993 714.23999 l
332.399994 715.679993 l
332.880005 716.880005 l
333.359985 717.600037 l
334.079987 718.079956 l
334.559998 718.320007 l
335.039978 718.079956 l
335.759979 717.359985 l
336.23999 716.639954 l
336.720001 715.440002 l
337.200012 714.0 l
337.679993 712.079956 l
338.160004 710.159973 l
338.880005 707.76001 l
339.359985 705.359985 l
339.839996 702.959961 l
340.559998 700.320007 l
341.039978 697.679993 l
341.519989 694.799988 l
342.47998 689.519958 l
343.200012 687.119995 l
343.679993 684.719971 l
344.160004 682.559998 l
344.639984 680.640015 l
345.359985 678.959961 l
345.839996 677.76001 l
346.320007 676.799988 l
347.039978 675.839966 l
347.519989 675.600037 l
348.0 675.600037 l
348.47998 675.839966 l
348.959991 676.320007 l
349.440002 677.519958 l
350.160004 678.719971 l
350.639984 680.400024 l
351.119995 682.079956 l
351.839996 684.23999 l
352.320007 686.400024 l
352.800018 689.039978 l
353.519989 691.679993 l
354.0 694.079956 l
354.47998 696.719971 l
S
n
264.47998 620.400024 72.0 108.0 re
1.0 sg
f
0.72 w
n
264.47998 620.400024 m
264.47998 620.400024 72.0 108.0 re
0.003922 sg
S
n
409.200012 613.679993 46.079987 126.0 re
1.0 sg
f
0.0 sg
31.440002 745.200012 m
(InteractionPhotodiode)
[4.079911 6.0 3.122398 5.522403 3.839911 5.282403 5.522403 3.362399 3.122398 6.0 303.840027 
6.717597 6.002399 6.002399 3.338398 6.002399 6.002399 3.122398 6.002399 6.002399 5.330403 ] pdfxs
n
408.47998 723.839966 m
408.47998 624.959961 l
264.47998 593.279968 m
264.47998 584.400024 l
48.48 588.959961 m
399.600006 588.959961 l
0.003922 sg
S
n
398.880005 592.080017 m
408.47998 588.959961 l
398.880005 585.600037 l
398.880005 592.080017 l
eofill
n
57.600002 593.279968 m
57.600002 584.400024 l
S
0.0 sg
50.880005 570.959961 m
/N19 7.919998 Tf
(z=0z=d)
[4.080383 4.560332 198.239136 4.079591 4.560332 4.523901 ] pdfxs
q
7.68 0.0 0.0 -17.279999 158.159973 729.359924 cm
0.0 sg
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 32 def
/Height 72 def
/ImageMatrix [32.0 0.0 0.0 -72.0 0.0 72.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource {currentfile userdict /CIstring get readhexstring pop} bind def
end
32 72 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
userdict /CIstring 4 string put
imagemask
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
F83F87FFF01F01FFE3CE78FFC3E4FC7FC7F5FC3F87F1FC3F8FFBFE3F0FFBFE1F
0FFBFE1F0FFBFE1F0FF1FE1F0FF1FE1F0FF1FE1F0FF1FE1F0FF1FE1F8FF1FE3F
87F1FC3F87F1FC3FC7F1FC7FC3FBF87FE1FFF0FFF0FFE1FFFC3F83FFFF0E1FFF

Q
Q
q
23.039999 0.0 0.0 -33.119999 149.279984 624.23999 cm
0.0 sg
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 96 def
/Height 138 def
/ImageMatrix [96.0 0.0 0.0 -138.0 0.0 138.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource {currentfile userdict /CIstring get readhexstring pop} bind def
end
96 138 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
userdict /CIstring 12 string put
imagemask
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFDFFFFFFFF3FFFF
FFFFFFFFFFE7FFFFFFE7FFFFFFFFFFFFFFF1FFFFFF8FFFFFFFFFFFFFFFF8FFFF
FF1FFFFFFFFFFFFFFFFC7FFFFE3FFFFFFFFFFFFFFFFE3FFFFC3FFFFFFFFFFFFF
FFFF1FFFF87FFFFFFFFFFFFFFFFF0FFFF87FFFFFFFFFFFFFFFFF8FFFF0FFFFFF
FFFFFFFFFFFF87FFE0FFFFFFFFFC1FC3FFFF83FFE1FF00000FF80F80FFFFC3FF
C1FF00000FF1E73C7FFFC1FFC1FFC00007E1F27E3FFFC1FF81FFE00007E3FAFE
1FFFC0FF81FFF3FFE7C3F8FE1FFFC0FF83FFF9FFF3C7FDFF1FFFE0FF83FFFCFF
FB87FDFF0FFFE0FF03FFFE7FFF87FDFF0FFFE07F03FFFF3FFF87FDFF0FFFE07F
03FFFF9FFF87F8FF0FFFE07F03FFFFCFFF87F8FF0FFFE07F03FFFFE7FF87F8FF
0FFFE07F03FFFFF3FF87F8FF0FFFE07F03FFFFFBFF87F8FF0FFFE07F03FFFFF9
FFC7F8FF1FFFE07F03FFFFFCFFC3F8FE1FFFE07F03FFFFFE7FC3F8FE1FFFE07F
83FFFFFE7FE3F8FE3FFFE0FF83FFFFFE3FE1FDFC3FFFE0FF81FFFFFF3FF0FFF8
7FFFC0FF81FFFFFF1FF87FF0FFFFC0FFC1FFFFFF1FFE1FC1FFFFC1FFC1FFFFFF
0FFF870FFFFFC1FFE1FFFFFF0FFFFFFFFFFFC3FFE0FFBFFF0FFFFFFFFFFF83FF
F0FF9FFF0FFFFFFFFFFF87FFF8FF9FFE0FFFFFFFFFFF8FFFF87FCFFC0FFFFFFF
FFFF0FFFFC7FC7F81FFFFFFFFFFE1FFFFE3FE1F01FFFFFFFFFFE3FFFFF1FE000
3FFFFFFFFFFC7FFFFF8FF0007FFFFFFFFFF8FFFFFFC7F800FFFFFFFFFFF3FFFF
FFF3FE03FFFFFFFFFFE7FFFFFFFDFFFFFFFFFFFFFFDFFFFF
Q
Q
q
7.68 0.0 0.0 -15.839999 172.079987 617.280029 cm
0.0 sg
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 32 def
/Height 66 def
/ImageMatrix [32.0 0.0 0.0 -66.0 0.0 66.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource {currentfile userdict /CIstring get readhexstring pop} bind def
end
32 66 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
userdict /CIstring 4 string put
imagemask
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF007FFFFFE3FFFFFFE3FFFFFFE3FFFFFF
E3FFFFFFE3FFFFFFE3FFFFFFE3FFFFFFE3FFFFFFE3FFFFFFE3FFFFFFE3FFFFFF
E3FFFFFFE3FFFFFFE3FFFFFFE3FFFFFFE3FFFFFFE3FFFFFF03FFFFFF83FFFFFF
E3FFFFFFFBFFFFFF
Q
Q
q
23.039999 0.0 0.0 -33.119999 356.399963 624.23999 cm
0.0 sg
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 96 def
/Height 138 def
/ImageMatrix [96.0 0.0 0.0 -138.0 0.0 138.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource {currentfile userdict /CIstring get readhexstring pop} bind def
end
96 138 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
userdict /CIstring 12 string put
imagemask
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFDFFFFFFFF3FFFF
FFFFFFFFFFE7FFFFFFE7FFFFFFFFFFFFFFF1FFFFFF8FFFFFFFFFFFFFFFF8FFFF
FF1FFFFFFFFFFFFFFFFC7FFFFE3FFFFFFFFFFFFFFFFE3FFFFC3FFFFFFFFFFFFF
FFFF1FFFF87FFFFFFFFFFFFFFFFF0FFFF87FFFFFFFFFFFFFFFFF8FFFF0FFFFFF
FFFFFFFFFFFF87FFE0FFFFFFFFFC1FC3FFFF83FFE1FF00000FF80F80FFFFC3FF
C1FF00000FF1E73C7FFFC1FFC1FFC00007E1F27E3FFFC1FF81FFE00007E3FAFE
1FFFC0FF81FFF3FFE7C3F8FE1FFFC0FF83FFF9FFF3C7FDFF1FFFE0FF83FFFCFF
FB87FDFF0FFFE0FF03FFFE7FFF87FDFF0FFFE07F03FFFF3FFF87FDFF0FFFE07F
03FFFF9FFF87F8FF0FFFE07F03FFFFCFFF87F8FF0FFFE07F03FFFFE7FF87F8FF
0FFFE07F03FFFFF3FF87F8FF0FFFE07F03FFFFFBFF87F8FF0FFFE07F03FFFFF9
FFC7F8FF1FFFE07F03FFFFFCFFC3F8FE1FFFE07F03FFFFFE7FC3F8FE1FFFE07F
83FFFFFE7FE3F8FE3FFFE0FF83FFFFFE3FE1FDFC3FFFE0FF81FFFFFF3FF0FFF8
7FFFC0FF81FFFFFF1FF87FF0FFFFC0FFC1FFFFFF1FFE1FC1FFFFC1FFC1FFFFFF
0FFF870FFFFFC1FFE1FFFFFF0FFFFFFFFFFFC3FFE0FFBFFF0FFFFFFFFFFF83FF
F0FF9FFF0FFFFFFFFFFF87FFF8FF9FFE0FFFFFFFFFFF8FFFF87FCFFC0FFFFFFF
FFFF0FFFFC7FC7F81FFFFFFFFFFE1FFFFE3FE1F01FFFFFFFFFFE3FFFFF1FE000
3FFFFFFFFFFC7FFFFF8FF0007FFFFFFFFFF8FFFFFFC7F800FFFFFFFFFFF3FFFF
FFF3FE03FFFFFFFFFFE7FFFFFFFDFFFFFFFFFFFFFFDFFFFF
Q
Q
q
7.68 0.0 0.0 -15.839999 378.959961 617.280029 cm
0.0 sg
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 32 def
/Height 66 def
/ImageMatrix [32.0 0.0 0.0 -66.0 0.0 66.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource {currentfile userdict /CIstring get readhexstring pop} bind def
end
32 66 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
userdict /CIstring 4 string put
imagemask
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF007FFFFFE3FFFFFFE3FFFFFFE3FFFFFF
E3FFFFFFE3FFFFFFE3FFFFFFE3FFFFFFE3FFFFFFE3FFFFFFE3FFFFFFE3FFFFFF
E3FFFFFFE3FFFFFFE3FFFFFFE3FFFFFFE3FFFFFFE3FFFFFF03FFFFFF83FFFFFF
E3FFFFFFFBFFFFFF
Q
Q
q
23.039999 0.0 0.0 -33.119999 356.399963 732.23999 cm
0.0 sg
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 96 def
/Height 138 def
/ImageMatrix [96.0 0.0 0.0 -138.0 0.0 138.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource {currentfile userdict /CIstring get readhexstring pop} bind def
end
96 138 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
userdict /CIstring 12 string put
imagemask
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFDFFFFFFFF3FFFF
FFFFFFFFFFE7FFFFFFE7FFFFFFFFFFFFFFF1FFFFFF8FFFFFFFFFFFFFFFF8FFFF
FF1FFFFFFFFFFFFFFFFC7FFFFE3FFFFFFFFFFFFFFFFE3FFFFC3FFFFFFFFFFFFF
FFFF1FFFF87FFFFFFFFFFFFFFFFF0FFFF87FFFFFFFFFFFFFFFFF8FFFF0FFFFFF
FFFFFFFFFFFF87FFE0FFFFFFFFFC1FC3FFFF83FFE1FF00000FF80F80FFFFC3FF
C1FF00000FF1E73C7FFFC1FFC1FFC00007E1F27E3FFFC1FF81FFE00007E3FAFE
1FFFC0FF81FFF3FFE7C3F8FE1FFFC0FF83FFF9FFF3C7FDFF1FFFE0FF83FFFCFF
FB87FDFF0FFFE0FF03FFFE7FFF87FDFF0FFFE07F03FFFF3FFF87FDFF0FFFE07F
03FFFF9FFF87F8FF0FFFE07F03FFFFCFFF87F8FF0FFFE07F03FFFFE7FF87F8FF
0FFFE07F03FFFFF3FF87F8FF0FFFE07F03FFFFFBFF87F8FF0FFFE07F03FFFFF9
FFC7F8FF1FFFE07F03FFFFFCFFC3F8FE1FFFE07F03FFFFFE7FC3F8FE1FFFE07F
83FFFFFE7FE3F8FE3FFFE0FF83FFFFFE3FE1FDFC3FFFE0FF81FFFFFF3FF0FFF8
7FFFC0FF81FFFFFF1FF87FF0FFFFC0FFC1FFFFFF1FFE1FC1FFFFC1FFC1FFFFFF
0FFF870FFFFFC1FFE1FFFFFF0FFFFFFFFFFFC3FFE0FFBFFF0FFFFFFFFFFF83FF
F0FF9FFF0FFFFFFFFFFF87FFF8FF9FFE0FFFFFFFFFFF8FFFF87FCFFC0FFFFFFF
FFFF0FFFFC7FC7F81FFFFFFFFFFE1FFFFE3FE1F01FFFFFFFFFFE3FFFFF1FE000
3FFFFFFFFFFC7FFFFF8FF0007FFFFFFFFFF8FFFFFFC7F800FFFFFFFFFFF3FFFF
FFF3FE03FFFFFFFFFFE7FFFFFFFDFFFFFFFFFFFFFFDFFFFF
Q
Q
q
7.68 0.0 0.0 -15.839999 378.23996 725.280029 cm
0.0 sg
q
n
0.0 0.0 1.0 1.0 re
10 dict dup begin
/ImageType 1 def
/Width 32 def
/Height 66 def
/ImageMatrix [32.0 0.0 0.0 -66.0 0.0 66.0]  def
/BitsPerComponent 1 def
/Decode [0.0 1.0 ]  def
/DataSource {currentfile userdict /CIstring get readhexstring pop} bind def
end
32 66 false 4 -1 roll dup /ImageMatrix get exch /DataSource get
userdict /CIstring 4 string put
imagemask
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0003FFFF8003FFFFC003FFFFEFF9FFFF
F7FDFFFFFBFFFFFFFDFFFFFFFEFFFFFFFF7FFFFFFFBFFFFFFF9FFFFFFFCFFFFF
FFC7FFFFFFE7FFFFFFE3FFFFFFE3FFFF7FE3FFFF7FC3FFFFBFC3FFFF8F07FFFF
C00FFFFFF03FFFFF
Q
Q
n
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%DocumentNeededResources:
%%+ font TimesNewRomanPSMT
%%+ font ArialMT
%%EOF
